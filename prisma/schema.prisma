// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?  @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Configurações do tenant
  config      TenantConfig?
  
  // Dados do tenant
  tasks       Task[]
  users       User[]

  @@map("tenants")
}

model TenantConfig {
  id          String   @id @default(cuid())
  tenantId    String   @unique
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Configurações visuais
  primaryColor    String  @default("#6366f1")
  secondaryColor  String  @default("#8b5cf6")
  logoUrl         String?
  companyName     String?
  companyEmail    String?
  companyPhone    String?
  companyAddress  String?
  
  // Configurações da aplicação
  allowRegistration Boolean @default(true)
  maxTasksPerUser   Int     @default(100)
  allowTaskComments Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tenant_configs")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String
  password    String
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Dados do usuário
  tasks       Task[]

  @@unique([email, tenantId])
  @@map("users")
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  tags        String[] // Array de tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
} 